package CBP_Prac;

public class CBP_Prac5 {
	   private final Logger logger = LoggerFactory.getLogger(this.getClass());

	   private ArrMngr arrMngr;
	   private ArrSrvcCntr arrSrvcCntr;
	   private ArrTxMngr arrTxMngr;
	   private CustMngr custMngr;
	   private CmnContext cmnContext;
	   private ArrBalMngr arrBalMngr;

	   @BxmServiceOperation("depositDpst")
	   @CbbSrvcInfo(srvcCd = "SED7649995", srvcNm = "Deposit Demand Account")
	   public DpstDpst764SvcDepositDpstOut depositDpst(DpstDpst764SvcDepositDpstIn in) throws BizApplicationException {

	      /*
	       * step1: 계약조회. 계좌번호로 계약객체를 조회한다.
	       */
	      //ArrMngr arrMngr = CbbApplicationContext.getBean(ArrMngr.class);  //
	      //ArrReal arrReal = arrMngr.getArr(in.getAccntNbr(), null);       //밑에꺼랑 같은거
	      ArrReal arrReal = _getArrMngr().getArrRealByAcctNbr(in.getAcctNbr(), null); // ArrTx란 애들은 Arr이 무조건 있어야함

	      /*
	       * step2: 서비스 검증    //업무서비스 별 필수 처리로직 수행
	       */
	      _validateService(in, arrReal);

	      // 거래 일련번호(근기2) 조회  
	      int txSeqNbr = _getArrTxMngr().getTxSeqNbr(arrReal.getArrId());

	      /*
	       * step3: 조건검증 수행    //이 상품의 상품조건 값이 정상인지 체크
	       */
	      _doServiceAction(arrReal, txSeqNbr);

	      /*
	       * step4: 거래생성 및 잔액갱신   //정산 (분개규칙)
	       */
	      ArrTx tx = _createTransactionHistory(in, arrReal, txSeqNbr);
	      /*
	       * step5: 출력조립
	       */

	      return _makeServiceOutput(arrReal, tx);
	   }

	   private ArrMngr _getArrMngr() throws BizApplicationException {
	      arrMngr = (ArrMngr) CbbApplicationContext.getBean(ArrMngr.class, arrMngr);

	      return arrMngr;

	   }

	   private ArrTxMngr _getArrTxMngr() throws BizApplicationException {
	      arrTxMngr = (ArrTxMngr) CbbApplicationContext.getBean(ArrTxMngr.class, arrTxMngr);

	      return arrTxMngr;

	   }

	   private ArrSrvcCntr _getArrSrvcCntr() throws BizApplicationException {
	      arrSrvcCntr = (ArrSrvcCntr) CbbApplicationContext.getBean(ArrSrvcCntr.class, arrSrvcCntr);

	      return arrSrvcCntr;

	   }

	   private CmnContext _getcmnContext() throws BizApplicationException {
	      cmnContext = (CmnContext) CbbApplicationContext.getBean(CmnContext.class, cmnContext);

	      return cmnContext;

	   }

	   private CustMngr _getCustMngr() throws BizApplicationException {
	      custMngr = (CustMngr) CbbApplicationContext.getBean(CustMngr.class, custMngr);

	      return custMngr;

	   }

	   private ArrBalMngr _getArrBalMngr() throws BizApplicationException {
	      arrBalMngr = (ArrBalMngr) CbbApplicationContext.getBean(ArrBalMngr.class, arrBalMngr);

	      return arrBalMngr;

	   }

	   private void _validateService(DpstDpst764SvcDepositDpstIn in, ArrReal arr) throws BizApplicationException {
	      // 입금금액 검증
	      if (in.getTxAmt() == null || in.getTxAmt().equals(BigDecimal.ZERO)) {
	         throw new BizApplicationException("AAPDPE0074", null);
	      }

	      // 검증규칙 검증 수행
	      _getArrSrvcCntr().validate(arr, null);
	   }

	   private void _doServiceAction(ArrReal arrReal, Integer txSeqNbr) throws BizApplicationException {
	      ArrActionRequiredValue in = new ArrActionRequiredValue();

	      // Generated by code generator [[
	      in.setTxDt(_getcmnContext().getTxDate());
	      in.setTxSeqNbr(txSeqNbr);
	      // Generated by code generator ]]

	      arrReal.doServiceAction(in);

	   }

	   private ArrTx _createTransactionHistory(DpstDpst764SvcDepositDpstIn in, ArrReal arrReal, int txSeqNbr)
	         throws BizApplicationException {
	      ArrTxStdFrmtIn arrTxStdFrmtIn = new ArrTxStdFrmtIn();

	      /*
	       * step4-1: 거래기본정보 조립
	       */
	      // Generated by code generator [[
	      arrTxStdFrmtIn.setCrncyCd(in.getCrncyCd());// set [통화코드]
	      arrTxStdFrmtIn.setTxAmt(in.getTxAmt());// set [거래금액]
	      arrTxStdFrmtIn.setTxRmkCntnt(in.getTxRmkCntnt());// set [거래적요내용]
	      arrTxStdFrmtIn.setTxSeqNbr(txSeqNbr);
	      // Generated by code generator ]]

	      /*
	       * step4-2: 잔액갱신을 위한 입출내역 조립
	       */
	      java.util.List<EntryIn> txEntryList = new ArrayList<EntryIn>();   
	      //EntryIn entryIn = _getEntryIn(in, arrReal);                   //메소드 찢으면 이거
	      EntryIn entryIn = new EntryIn();                           //여기부터

	      // Generated by code generator [[                           //메소드 안으로 넣음
	      entryIn.setAmtTpCd(AmtTpEnum.PRNCPL.getValue()); //금액유형 : 원금
	      entryIn.setCrncyCd(in.getCrncyCd()); // set [통화코드]
	      entryIn.setDpstWhdrwlDscd(DpstWhdrwlEnum.DPST.getValue());
	      entryIn.setCashTrnsfrDscd(CashTrnsfrEnum.CASH.getValue());
	      entryIn.setCashAmt(in.getTxAmt());
	      entryIn.setTrnsfrAmt(java.math.BigDecimal.ZERO);
	      entryIn.setTxAmt(in.getTxAmt());
	      // Generated by code generator ]]                           //여까지
	      
	      /* 두번째 리스트 넣기
	      entryIn = new EntryIn();
	      // Generated by code generator [[
	      entryIn.setAmtTpCd(AmtTpEnum.INT.getValue()); //금액유형 : 원금
	      entryIn.setCrncyCd(in.getCrncyCd()); // set [통화코드]
	      entryIn.setDpstWhdrwlDscd(DpstWhdrwlEnum.DPST.getValue());
	      entryIn.setCashTrnsfrDscd(CashTrnsfrEnum.CASH.getValue());
	      entryIn.setCashAmt(in.getTxAmt());
	      entryIn.setTrnsfrAmt(java.math.BigDecimal.ZERO);
	      entryIn.setTxAmt(in.getTxAmt());
	      
	      */
	      
	      txEntryList.add(entryIn);
	      arrTxStdFrmtIn.setTxEntry(txEntryList);

	      /*
	       *  step4-3: 거래확장속성 정보 조립
	       */
	      arrTxStdFrmtIn.setXtnInfo(_getArrTxXtnCntntIn(in, arrReal, entryIn));
	      
	      /*
	       *  step4-4: 거래생성
	       */
	      return _getArrTxMngr().createArrTx(arrTxStdFrmtIn, arrReal);
	   }
	/*
	   private EntryIn _getEntryIn(DpstDpst764SvcDepositDpstIn in, ArrReal arr) throws BizApplicationException {
	      EntryIn entryIn = new EntryIn();

	      // Generated by code generator [[
	      entryIn.setAmtTpCd(AmtTpEnum.PRNCPL.getValue()); //금액유형 : 원금
	      entryIn.setCrncyCd(in.getCrncyCd()); // set [통화코드]
	      entryIn.setDpstWhdrwlDscd(DpstWhdrwlEnum.DPST.getValue());
	      entryIn.setCashTrnsfrDscd(CashTrnsfrEnum.CASH.getValue());
	      entryIn.setCashAmt(in.getTxAmt());
	      entryIn.setTrnsfrAmt(java.math.BigDecimal.ZERO);
	      entryIn.setTxAmt(in.getTxAmt());
	      // Generated by code generator ]]
	      
	      return entryIn;

	   }
	   */
	   private java.util.List<ArrTxXtnCntntIn> _getArrTxXtnCntntIn(DpstDpst764SvcDepositDpstIn in, ArrReal arrReal, EntryIn entryIn) throws BizApplicationException {
	      java.util.List<ArrTxXtnCntntIn> xtnInfo = new ArrayList<ArrTxXtnCntntIn>();
	      
	      ArrTxXtnCntntIn txXtnCntntIn = new ArrTxXtnCntntIn();
	      txXtnCntntIn.setXtnAtrbtNm(ArrTxXtnInfoEnum.CUST_TX_DSCD.getValue());         //성명
	      txXtnCntntIn.setXtnAtrbtCntnt(CustTxDscdDpstEnum.DEPOSIT_CASH.getValue());      //정주용
	      xtnInfo.add(txXtnCntntIn);
	      /*                  확장속성 테이블 추가하는 것
	      txXtnCntntIn.setXtnAtrbtNm(ArrTxXtnInfoEnum.CUST_TX_DSCD.getValue());         //휴대폰번호
	      txXtnCntntIn.setXtnAtrbtCntnt(CustTxDscdDpstEnum.DEPOSIT_CASH.getValue());      //01020025515
	      xtnInfo.add(txXtnCntntIn);
	      
	      txXtnCntntIn.setXtnAtrbtNm(ArrTxXtnInfoEnum.CUST_TX_DSCD.getValue());         //반려동물키우는 여부
	      txXtnCntntIn.setXtnAtrbtCntnt(CustTxDscdDpstEnum.DEPOSIT_CASH.getValue());      //N
	      xtnInfo.add(txXtnCntntIn);
	      */
	      return xtnInfo;
	      
	   }

	   private DpstDpst764SvcDepositDpstOut _makeServiceOutput(ArrReal arr, ArrTx tx) throws BizApplicationException {
	      // TODO Auto-generated method stub
	      DpstDpst764SvcDepositDpstOut out = new DpstDpst764SvcDepositDpstOut();

	      // 계약 - 계좌번호 조립
	      out.setAcctNbr(arr.getAcctNbr());
	      // 정산 - 잔액정보 조립
	      out.setAcctBal(_getArrBalMngr().getArrPrincipalBal(arr, arr.getCrncyCd()).getLastBal()); // 계약최종잔액기본 조회
	      // 정산 - 거래정보 조립

	      // Generated by code generator [[
	      out.setTxAmt(tx.getTxAmt());// set [거래금액]
	      out.setTxHms(tx.getTxHms());// set [거래시분초]
	      out.setTxRmkCntnt(tx.getTxRmkCntnt());// set [거래적요내용]
	      // Generated by code generator ]]

	      // 고객 - 고객명 조립
	      out.setCustNm(_getCustMngr().getCust(arr.getMainArrCustId()).getName());

	      return out;

	   }
	}
